#!/usr/bin/env ruby
require 'colorize'

def die_with_error(msg)
  puts "ERROR: #{msg}"
  exit 1
end

def assert_valid_pair(publ, priv)
  # puts `openssl x509 -noout -text -in #{publ}`
  # puts `openssl rsa -noout -text -in #{priv}`
  
  publ_mod = `openssl x509 -noout -modulus -in #{publ}`
  priv_mod = `openssl rsa -noout -modulus -in #{priv}`

  puts "* PUBL_MOD = #{publ_mod}"
  puts "* PRIV_MOD = #{priv_mod}"

  if(publ_mod != priv_mod)
    die_with_error("KEY-PAIR-DOES-NOT-MATCH")
  end
end

system("./cleanup")

$bits = 1024
$enc = "-des3"

$pass = "file:inputs/passphrase.txt"
$subj = "/C=US/ST=California/L=LosAngeles/CN=lvh.me"
$subj_client = "/C=US/ST=California/L=LosAngeles/CN=client.lvh.me"
$subj_client2 = "/C=US/ST=California/L=LosAngeles/CN=client2.lvh.me"
$subj_intermediate = "/C=US/ST=California/L=LosAngeles/CN=intermediate.lvh.me"
$out = "./output"

$client_ca_root_priv = "#{$out}/client_ca_root_priv.key"
$client_ca_root_publ = "#{$out}/client_ca_root_publ.crt"
$client_ca_root_priv_nopass = "#{$client_ca_root_priv}.nopass"

$server_ca_root_priv = "#{$out}/server_ca_root_priv.key"
$server_ca_root_publ = "#{$out}/server_ca_root_publ.crt"
$server_ca_root_priv_nopass = "#{$server_ca_root_priv}.nopass"

$server_priv = "#{$out}/server_priv.key"
$server_csr  = "#{$out}/server_csr"
$server_publ = "#{$out}/server_publ.crt"
$server_priv_nopass = "#{$server_priv}.nopass"

$client_priv = "#{$out}/client_priv.key"
$client_publ = "#{$out}/client_publ.crt"
$client_csr  = "#{$out}/client_csr"
$client_priv_nopass = "#{$client_priv}.nopass"
$client_combined_pem = "#{$out}/client_combined.pem"
$client_combined_pfx = "#{$out}/client_combined.pfx"

$intermediate_csr = "#{$out}/intermediate.csr"

$client2_priv = "#{$out}/client2_priv.key"
$client2_publ = "#{$out}/client2_publ.crt"
$client2_csr  = "#{$out}/client2_csr"
$client2_priv_nopass = "#{$client2_priv}.nopass"
$client2_combined_pem = "#{$out}/client2_combined.pem"
$client2_combined_pfx = "#{$out}/client2_combined.pfx"


#---------------------------------------------------------------------------------------------
#--- CREATE CLIENT ROOT CA
#---------------------------------------------------------------------------------------------
system("openssl genrsa #{$enc} -out #{$client_ca_root_priv} -passout #{$pass} #{$bits}")
system("openssl rsa -in #{$client_ca_root_priv} -out #{$client_ca_root_priv_nopass} -passin #{$pass}")
system("openssl req -new -x509 -days 365 -key #{$client_ca_root_priv} -passin #{$pass} -subj '#{$subj}' -out #{$client_ca_root_publ}")
assert_valid_pair($client_ca_root_publ, $client_ca_root_priv_nopass)


#---------------------------------------------------------------------------------------------
#--- CREATE SERVER ROOT CA
#---------------------------------------------------------------------------------------------
system("openssl genrsa #{$enc} -out #{$server_ca_root_priv} -passout #{$pass} #{$bits}")
system("openssl rsa -in #{$server_ca_root_priv} -out #{$server_ca_root_priv_nopass} -passin #{$pass}")
system("openssl req -new -x509 -days 365 -key #{$server_ca_root_priv} -passin #{$pass} -subj '#{$subj}' -out #{$server_ca_root_publ}")
assert_valid_pair($server_ca_root_publ, $server_ca_root_priv_nopass)

#---------------------------------------------------------------------------------------------
#--- CREATE SERVER KEY AND SIGN WITH SERVER ROOT CA
#---------------------------------------------------------------------------------------------
system("openssl genrsa #{$enc} -out #{$server_priv} -passout #{$pass} #{$bits}")
system("openssl req -new -key #{$server_priv} -passin #{$pass} -subj '#{$subj}' -out #{$server_csr}")
system("openssl rsa -in #{$server_priv} -out #{$server_priv_nopass} -passin #{$pass}")
# system("openssl x509 -req -days 365 -in #{$server_csr} -signkey #{$server_priv_nopass} -out #{$server_publ}");
system("openssl x509 -req -days 365 -in #{$server_csr} -CA #{$server_ca_root_publ} -CAkey #{$server_ca_root_priv_nopass} -set_serial 01 -out #{$server_publ}");
assert_valid_pair($server_publ, $server_priv_nopass)


#---------------------------------------------------------------------------------------------
#--- CREATE CLIENT 1 KEY, CSR, AND SIGN WITH CLIENT ROOT CA
#---------------------------------------------------------------------------------------------
system("openssl genrsa #{$enc} -out #{$client_priv} -passout #{$pass} #{$bits}")
system("openssl rsa -in #{$client_priv} -passin #{$pass} -out #{$client_priv_nopass}")
system("openssl req -new -key #{$client_priv_nopass} -subj #{$subj_client} -out #{$client_csr}")
# Sign the client certificate with our CA cert.
system("openssl x509 -req -days 365 -in #{$client_csr} -CA #{$client_ca_root_publ} -CAkey #{$client_ca_root_priv_nopass} -set_serial 01 -out #{$client_publ}")
out = `openssl verify -CAfile #{$client_ca_root_publ} #{$client_publ}`.chomp
unless(out == "#{$client_publ}: OK")
  die_with_error("client_publ mismatch")
end
# Combine Client Private Key and Client Public Key into one .pem to convert to PKCS12 File - for Chrome/Some-Browser
system("cat #{$client_publ} #{$client_priv_nopass} > #{$client_combined_pem}")
system("openssl pkcs12 -export -out #{$client_combined_pfx} -inkey #{$client_priv_nopass} -in #{$client_publ} -certfile #{$client_ca_root_publ} -passout #{$pass}")


#---------------------------------------------------------------------------------------------
#--- CREATE CLIENT INTERMEDIATE CA
#---------------------------------------------------------------------------------------------


#---------------------------------------------------------------------------------------------
#--- CREATE CLIENT 2 KEY, CSR, and SIGN WITH CLIENT INTERMEDIATE CA
#---------------------------------------------------------------------------------------------
system("openssl genrsa #{$enc} -out #{$client2_priv} -passout #{$pass} #{$bits}")
system("openssl rsa -in #{$client2_priv} -passin #{$pass} -out #{$client2_priv_nopass}")
system("openssl req -new -key #{$client2_priv_nopass} -subj #{$subj_client2} -out #{$client2_csr}")

# Sign the client certificate with client's CA
system("openssl x509 -req -days 360 -in #{$client2_csr} -CA #{$client_publ} -CAkey #{$client_priv_nopass} -set_serial 01 -out #{$client2_publ}")


system("cat #{$client2_publ} #{$client2_priv_nopass} > #{$client2_combined_pem}")
system("openssl pkcs12 -export -out #{$client2_combined_pfx} -inkey #{$client2_priv_nopass} -in #{$client2_publ} -certfile #{$client_publ} -passout #{$pass}")


system("sudo systemctl restart nginx")
puts "************* Preparing TESTS. SLEEPING...".green
sleep 2
puts `./curl_lvh_with_ca_crt`