#!/usr/bin/env ruby
require 'colorize'
require 'ostruct'
require 'pathname'
require 'erb'

def assert_valid_chain(ca_crt, ta_crt)
  out = `openssl verify -CAfile #{ca_crt} #{ta_crt}`.chomp
  unless(out == "#{ta_crt}: OK")
    puts "-----------------------------------".red
    puts "--- assert_valid_chain ".red
    puts "--- ca_crt = #{ca_crt}".red
    puts "--- ta_crt = #{ta_crt}".red
    puts "-----------------------------------".red
    throw "ASSERTION_FAILED. assert_valid_chain"
  end
end

def assert_valid_pair(publ, priv)
  publ_mod = `openssl x509 -noout -modulus -in #{publ}`
  priv_mod = `openssl rsa -noout -modulus -in #{priv}`

  # puts "* PUBL_MOD = #{publ_mod}"
  # puts "* PRIV_MOD = #{priv_mod}"

  if(publ_mod != priv_mod)
    puts "-----------------------------------".red
    puts "--- assert_valid_pair ".red
    puts "--- publ = #{publ}".red
    puts "--- priv = #{priv}".red
    puts "--- publ_mod = #{publ_mod}"
    puts "--- priv_mod = #{priv_mod}"
    puts "-----------------------------------".red
    throw "ASSERTION_FAILED. assert_valid_pair"
  end
end

system("./cleanup")

$bits = 1024
$enc = "-des3"

$pass = "file:inputs/passphrase.txt"
$out = "./output"

$domain = "test-nginx-client-cert.lvh.me"
$client_ca_root_subj = "/C=US/ST=California/L=LosAngeles/CN=root_client.#{$domain}"
$client_ca_root_priv = "#{$out}/client_ca_root_priv.key"
$client_ca_root_publ = "#{$out}/client_ca_root_publ.crt"
$client_ca_root_priv_nopass = "#{$client_ca_root_priv}.nopass"
$client_ca_root_srl = "#{$out}/client_ca_root_publ.srl"

$client_ca_im01_subj = "/C=US/ST=California/L=LosAngeles/CN=im01_client.#{$domain}"
$client_ca_im01_csr = "#{$out}/client_ca_im01_csr"
$client_ca_im01_priv = "#{$out}/client_ca_im01_priv.key"
$client_ca_im01_publ = "#{$out}/client_ca_im01_publ.crt"
$client_ca_im01_priv_nopass = "#{$client_ca_im01_priv}.nopass"

$server_ca_root_subj = "/C=US/ST=California/L=LosAngeles/CN=root_server.#{$domain}"
$server_ca_root_priv = "#{$out}/server_ca_root_priv.key"
$server_ca_root_publ = "#{$out}/server_ca_root_publ.crt"
$server_ca_root_priv_nopass = "#{$server_ca_root_priv}.nopass"

$server_subj = "/C=US/ST=California/L=LosAngeles/CN=#{$domain}"
$server_priv = "#{$out}/server_priv.key"
$server_csr  = "#{$out}/server_csr"
$server_publ = "#{$out}/server_publ.crt"
$server_priv_nopass = "#{$server_priv}.nopass"

$client_subj = "/C=US/ST=California/L=LosAngeles/CN=client.#{$domain}"
$client_priv = "#{$out}/client_priv.key"
$client_publ = "#{$out}/client_publ.crt"
$client_csr  = "#{$out}/client_csr"
$client_priv_nopass = "#{$client_priv}.nopass"
$client_combined_pem = "#{$out}/client_combined.pem"
$client_combined_pfx = "#{$out}/client_combined.pfx"

$intermediate_csr = "#{$out}/intermediate.csr"

$client2_subj = "/C=US/ST=California/L=LosAngeles/CN=client2.#{$domain}"
$client2_priv = "#{$out}/client2_priv.key"
$client2_publ = "#{$out}/client2_publ.crt"
$client2_csr  = "#{$out}/client2_csr"
$client2_priv_nopass = "#{$client2_priv}.nopass"
$client2_publ_fullchain = "#{$out}/client2_publ.fullchain"

# $client2_combined_pem = "#{$out}/client2_combined.pem"
# $client2_combined_pfx = "#{$out}/client2_combined.pfx"


#---------------------------------------------------------------------------------------------
#--- CREATE CLIENT ROOT CA
#---------------------------------------------------------------------------------------------
system("openssl genrsa #{$enc} -out #{$client_ca_root_priv} -passout #{$pass} #{$bits}")
system("openssl rsa -in #{$client_ca_root_priv} -out #{$client_ca_root_priv_nopass} -passin #{$pass}")
system("openssl req -new -x509 -days 365 -key #{$client_ca_root_priv} -passin #{$pass} -subj '#{$client_ca_root_subj}' -out #{$client_ca_root_publ}")
assert_valid_pair($client_ca_root_publ, $client_ca_root_priv_nopass)


#---------------------------------------------------------------------------------------------
#--- CREATE SERVER ROOT CA
#---------------------------------------------------------------------------------------------
system("openssl genrsa #{$enc} -out #{$server_ca_root_priv} -passout #{$pass} #{$bits}")
system("openssl rsa -in #{$server_ca_root_priv} -out #{$server_ca_root_priv_nopass} -passin #{$pass}")
system("openssl req -new -x509 -days 365 -key #{$server_ca_root_priv} -passin #{$pass} -subj '#{$server_ca_root_subj}' -out #{$server_ca_root_publ}")
assert_valid_pair($server_ca_root_publ, $server_ca_root_priv_nopass)

#---------------------------------------------------------------------------------------------
#--- CREATE SERVER KEY, CSR, AND SIGN WITH SERVER ROOT CA
#---------------------------------------------------------------------------------------------
system("openssl genrsa #{$enc} -out #{$server_priv} -passout #{$pass} #{$bits}")
system("openssl req -new -key #{$server_priv} -passin #{$pass} -subj '#{$server_subj}' -out #{$server_csr}")
system("openssl rsa -in #{$server_priv} -out #{$server_priv_nopass} -passin #{$pass}")
# system("openssl x509 -req -days 365 -in #{$server_csr} -signkey #{$server_priv_nopass} -out #{$server_publ}");
system("openssl x509 -req -days 365 -in #{$server_csr} -CA #{$server_ca_root_publ} -CAkey #{$server_ca_root_priv_nopass} -set_serial 01 -out #{$server_publ}");
assert_valid_pair($server_publ, $server_priv_nopass)
assert_valid_chain($server_ca_root_publ, $server_publ)


#---------------------------------------------------------------------------------------------
#--- CREATE CLIENT 1 KEY, CSR, AND SIGN WITH CLIENT ROOT CA
#---------------------------------------------------------------------------------------------
system("openssl genrsa #{$enc} -passout #{$pass} -out #{$client_priv} #{$bits}")
system("openssl rsa -in #{$client_priv} -passin #{$pass} -out #{$client_priv_nopass}")
system("openssl req -new -key #{$client_priv_nopass} -subj #{$client_subj} -out #{$client_csr}")
# Sign the client certificate with our CA cert.
system("openssl x509 -req -days 365 -in #{$client_csr} -CA #{$client_ca_root_publ} -CAkey #{$client_ca_root_priv_nopass} -set_serial 01 -out #{$client_publ}")
assert_valid_pair($client_publ, $client_priv_nopass)
assert_valid_chain($client_ca_root_publ, $client_publ)
# Combine Client Private Key and Client Public Key into one .pem to convert to PKCS12 File - for Chrome/Some-Browser
system("cat #{$client_publ} #{$client_priv_nopass} > #{$client_combined_pem}")
system("openssl pkcs12 -export -out #{$client_combined_pfx} -inkey #{$client_priv_nopass} -in #{$client_publ} -certfile #{$client_ca_root_publ} -passout #{$pass}")


assertion_failed = false
puts "EXPECTING ASSERTION TO FAIL".green
begin
assert_valid_chain($server_ca_root_publ, $client_publ)
rescue => e
  assertion_failed = true
  puts "SUCCESS. ASSERTION FAILED AS EXPECTED".green
end
unless assertion_failed
  puts "FAILURE. ASSERTION DID NOT FAIL AS EXPECTED".red
  throw "ASSERTION TEST FAILURE"
end

#---------------------------------------------------------------------------------------------
#--- CREATE CLIENT INTERMEDIATE-01 CA
#---------------------------------------------------------------------------------------------
system("openssl genrsa #{$enc} -out #{$client_ca_im01_priv} -passout #{$pass} #{$bits}")
system("openssl rsa -in #{$client_ca_im01_priv} -out #{$client_ca_im01_priv_nopass} -passin #{$pass}")
system("openssl req -new -key #{$client_ca_im01_priv_nopass} -out #{$client_ca_im01_csr} -subj '#{$client_ca_im01_subj}' -passin #{$pass}")
system("openssl x509 -req -in #{$client_ca_im01_csr} -CA #{$client_ca_root_publ} -CAkey #{$client_ca_root_priv_nopass} -CAcreateserial -CAserial #{$client_ca_root_srl} -extfile v3_ca.ext -out #{$client_ca_im01_publ} -days 365 -sha256 -passin #{$pass}")
assert_valid_chain($client_ca_root_publ, $client_ca_im01_publ)

#---------------------------------------------------------------------------------------------
#--- CREATE CLIENT 2 KEY, CSR, and SIGN WITH CLIENT INTERMEDIATE-01 CA
#---------------------------------------------------------------------------------------------
system("openssl genrsa #{$enc} -out #{$client2_priv} -passout #{$pass} #{$bits}")
system("openssl rsa -in #{$client2_priv} -passin #{$pass} -out #{$client2_priv_nopass}")
system("openssl req -new -key #{$client2_priv_nopass} -subj #{$client2_subj} -out #{$client2_csr}")
# Sign the client certificate with client's CA
system("openssl x509 -req -days 360 -in #{$client2_csr} -CA #{$client_ca_im01_publ} -CAkey #{$client_ca_im01_priv_nopass} -set_serial 01 -out #{$client2_publ}")
# Client2 is signed by intermediate, and requires a fullchain
system("cat #{$client2_publ} #{$client_ca_im01_publ} #{$client_ca_root_publ} > #{$client2_publ_fullchain}")
assert_valid_chain($client2_publ_fullchain, $client2_publ)

# Combine Client Private Key and Client Public Key into one .pem to convert to PKCS12 File - for Chrome/Some-Browser
# system("cat #{$client2_publ} #{$client2_priv_nopass} > #{$client2_combined_pem}")
# system("openssl pkcs12 -export -out #{$client2_combined_pfx} -inkey #{$client2_priv_nopass} -in #{$client2_publ} -certfile #{$client_publ} -passout #{$pass}")


#---------------------------------------------------------------------------------------------
#--- GENERATE NGINX CONF FILE FROM TEMPLATE
#---------------------------------------------------------------------------------------------
namespace = OpenStruct.new({
  :server_publ => Pathname.new($server_publ).realpath.to_s,
  :server_priv_nopass => Pathname.new($server_priv_nopass).realpath.to_s,
  :client_ca_root_publ => Pathname.new($client_ca_root_publ).realpath.to_s
});
puts namespace
nginx_template = IO.read("test_client_verification_server.nginx.erb")
nginx_conf = ERB.new(nginx_template).result(namespace.instance_eval { binding })
IO.write("test_client_verification_server.nginx", nginx_conf)


puts "** Restarting NGINX"
if     File.exists?("/usr/lib/systemd")
  puts "** USING systemd"
  system("sudo systemctl restart nginx")
elsif  File.exists?("/usr/share/upstart")
  puts "** USING upstart"
  system("service nginx restart")
else
  puts "** ERROR: Could not determine type of init".red
  exit 1
end

puts "************* Preparing TESTS. SLEEPING...".green
sleep 2

puts `./curl_lvh_with_ca_crt`